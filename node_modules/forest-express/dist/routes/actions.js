"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var context = require('../context');
/**
 * This class generates routes for handling smart actions' form hooks and legacy routes.
 */


var Actions = /*#__PURE__*/function () {
  function Actions() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : context.inject(),
        logger = _ref.logger,
        pathService = _ref.pathService,
        stringUtils = _ref.stringUtils,
        schemasGenerator = _ref.schemasGenerator,
        smartActionHook = _ref.smartActionHook;

    (0, _classCallCheck2["default"])(this, Actions);
    this.path = pathService;
    this.logger = logger;
    this.stringUtils = stringUtils;
    this.schemasGenerator = schemasGenerator;
    this.smartActionHook = smartActionHook;
  }
  /**
   * Generate a callback for express that handles the `values` route.
   * This legacy route is used to handle smart actions' forms initialization.
   * Users should use the `load` hook now.
   *
   * @param {Object} action The smart action
   * @returns {Function} A route callback for express
   */


  (0, _createClass2["default"])(Actions, [{
    key: "getValuesController",
    value: function getValuesController(action) {
      var _this = this;

      return function (request, response) {
        var successResponse = function successResponse(object) {
          return response.status(200).send(object);
        };

        var values = action.values ? action.values(request.body.data.attributes.values) : {};
        if (!(values.then && typeof values.then === 'function')) return successResponse(values);
        return values.then(function (valuesComputed) {
          return successResponse(valuesComputed);
        })["catch"](function (error) {
          _this.logger.error("Cannot send the values of the \"".concat(action.name, "\" Smart Actions because of an unexpected error: "), error);

          return successResponse({});
        });
      };
    }
    /**
     * @param {Number} recordId
     */

  }, {
    key: "getRecord",
    value: function () {
      var _getRecord = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(recordId) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", new this.implementation.ResourceGetter(this.model, {
                  recordId: recordId
                }).perform());

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getRecord(_x) {
        return _getRecord.apply(this, arguments);
      }

      return getRecord;
    }()
    /**
     * Generic hook controller.
     *
     * @param {Object} request the express.js request object
     * @param {Object} response the express.js response object
     * @param {Function} hook returns the response thanks to smartActionHook service
     * @returns {*} the express.js response object
     * @see getHookLoadController and getHookChangeController
     */

  }, {
    key: "getHook",
    value: function () {
      var _getHook = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(request, response, hook) {
        var record, updatedFields, message;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getRecord(request.body.recordIds[0]);

              case 2:
                record = _context2.sent;
                _context2.prev = 3;
                _context2.next = 6;
                return hook(record);

              case 6:
                updatedFields = _context2.sent;
                return _context2.abrupt("return", response.status(200).send({
                  fields: updatedFields
                }));

              case 10:
                _context2.prev = 10;
                _context2.t0 = _context2["catch"](3);
                message = _context2.t0.message;
                this.logger.error('Error in smart action load hook: ', message);
                return _context2.abrupt("return", response.status(500).send({
                  message: message
                }));

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[3, 10]]);
      }));

      function getHook(_x2, _x3, _x4) {
        return _getHook.apply(this, arguments);
      }

      return getHook;
    }()
    /**
     * Generate a callback for express that handles the `load` hook.
     *
     * @param {Object} action The smart action
     * @returns {Function} A route callback for express
     */

  }, {
    key: "getHookLoadController",
    value: function getHookLoadController(action) {
      var _this2 = this;

      return /*#__PURE__*/function () {
        var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(request, response) {
          return _regenerator["default"].wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.abrupt("return", _this2.getHook(request, response, /*#__PURE__*/function () {
                    var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(record) {
                      return _regenerator["default"].wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              return _context3.abrupt("return", _this2.smartActionHook.getResponse(action.hooks.load, action.fields, record));

                            case 1:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, _callee3);
                    }));

                    return function (_x7) {
                      return _ref4.apply(this, arguments);
                    };
                  }()));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        return function (_x5, _x6) {
          return _ref3.apply(this, arguments);
        };
      }();
    }
    /**
     * Generate a callback for express that handles the `change` hook.
     *
     * @param {Object} action The smart action
     * @returns {Function} A route callback for express
     */

  }, {
    key: "getHookChangeController",
    value: function getHookChangeController(action) {
      var _this3 = this;

      return /*#__PURE__*/function () {
        var _ref5 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(request, response) {
          var field;
          return _regenerator["default"].wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  field = request.body.fields.find(function (item) {
                    return item.previousValue !== item.value;
                  });
                  return _context6.abrupt("return", _this3.getHook(request, response, /*#__PURE__*/function () {
                    var _ref6 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(record) {
                      return _regenerator["default"].wrap(function _callee5$(_context5) {
                        while (1) {
                          switch (_context5.prev = _context5.next) {
                            case 0:
                              return _context5.abrupt("return", _this3.smartActionHook.getResponse(field && field.field ? action.hooks.change[field.field] : null, request.body.fields, record));

                            case 1:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      }, _callee5);
                    }));

                    return function (_x10) {
                      return _ref6.apply(this, arguments);
                    };
                  }()));

                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));

        return function (_x8, _x9) {
          return _ref5.apply(this, arguments);
        };
      }();
    }
    /**
     * Generate path for a smart action route.
     *
     * @param {*} action The smart action
     * @param {String} path The path to the hook
     * @param {*} options Environement actions
     * @returns {String} The generated path
     */

  }, {
    key: "getRoute",
    value: function getRoute(action, path, options) {
      if (action.endpoint) {
        return this.path.generateForSmartActionCustomEndpoint("".concat(action.endpoint, "/").concat(path), options);
      }

      var actionName = this.stringUtils.parameterize(action.name);
      return this.path.generate("actions/".concat(actionName, "/").concat(path), options);
    }
    /**
     * Build routes for each form hooks and legacy values routes.
     *
     * @param {Array} actions list of actions
     */

  }, {
    key: "buildRoutes",
    value: function buildRoutes(actions) {
      var _this4 = this;

      var createDynamicRoute = function createDynamicRoute(route, controller) {
        return _this4.app.post(route, _this4.auth.ensureAuthenticated, controller);
      };

      actions.forEach(function (action) {
        // Create a `values` routes for smart actions.
        // One route is created for each action which have a `values` property.
        if (action.values) {
          createDynamicRoute(_this4.getRoute(action, 'values', _this4.options), _this4.getValuesController(action));
        } // Create a `load` routes for smart actions.
        // One route is created for each action which have a `hooks.load` property.


        if (action.hooks && action.hooks.load) {
          createDynamicRoute(_this4.getRoute(action, 'hooks/load', _this4.options), _this4.getHookLoadController(action));
        } // Create a `change` routes for smart actions.
        // One route is created for each action which have a `hooks.change` property.


        if (action.hooks && action.hooks.change) {
          createDynamicRoute(_this4.getRoute(action, 'hooks/change', _this4.options), _this4.getHookChangeController(action));
        }
      });
    }
    /**
     *  Generate routes for smart action hooks (and the legacy values object).
     *
     * @param {*} app Express instance (route are attached to this object)
     * @param {*} model The model associated with the action
     * @param {*} Implementation Gives access to current Implementation (mongoose or sequelize)
     * @param {*} options Environment options
     * @param {*} auth Auth instance
     */

  }, {
    key: "perform",
    value: function perform(app, model, Implementation, options, auth) {
      this.implementation = Implementation;
      this.model = model;
      this.app = app;
      this.options = options;
      this.auth = auth;
      var modelName = Implementation.getModelName(model);
      var schema = this.schemasGenerator.schemas[modelName];
      if (!schema.actions) return;
      this.buildRoutes(schema.actions);
    }
  }]);
  return Actions;
}();

module.exports = Actions;