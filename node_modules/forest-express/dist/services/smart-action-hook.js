"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SmartActionHook = /*#__PURE__*/function () {
  function SmartActionHook(_ref) {
    var isSameDataStructure = _ref.isSameDataStructure,
        setFieldWidget = _ref.setFieldWidget;
    (0, _classCallCheck2["default"])(this, SmartActionHook);
    this.isSameDataStructure = isSameDataStructure;
    this.setFieldWidget = setFieldWidget;
  }
  /**
   * Transform fields from an array to an object to ease usage in hook,
   * adds null value, prepare widgets.
   *
   * @param {*} fields A smart action field
   */


  (0, _createClass2["default"])(SmartActionHook, [{
    key: "getFieldsForUser",
    value: function getFieldsForUser(fields) {
      var _this = this;

      return fields.reduce(function (previous, current) {
        // Update widget from legacy to current format.
        _this.setFieldWidget(current); // Return the field(with a default value set to null when none is provided).


        return _objectSpread(_objectSpread({}, previous), {}, (0, _defineProperty2["default"])({}, current.field, _objectSpread({
          value: null
        }, current)));
      }, {});
    }
    /**
     * Get the response from user-defined hook.
     *
     * @param {Function} hook the callback hook of the smart action.
     * @param {Array} fields the array of fields.
     * @param {Object} record the current record that has to be passed to load hook.
     */

  }, {
    key: "getResponse",
    value: function () {
      var _getResponse = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(hook, fields, record) {
        var fieldsForUser, result;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                fieldsForUser = this.getFieldsForUser(fields);

                if (!(typeof hook !== 'function')) {
                  _context.next = 3;
                  break;
                }

                throw new Error('hook must be a function');

              case 3:
                _context.next = 5;
                return hook({
                  record: record,
                  fields: fieldsForUser
                });

              case 5:
                result = _context.sent;

                if (result && (0, _typeof2["default"])(result) === 'object') {
                  _context.next = 10;
                  break;
                }

                throw new Error('hook must return an object');

              case 10:
                if (this.isSameDataStructure(fieldsForUser, result, 1)) {
                  _context.next = 12;
                  break;
                }

                throw new Error('fields must be unchanged (no addition nor deletion allowed)');

              case 12:
                return _context.abrupt("return", fields.map(function (field) {
                  return result[field.field];
                }));

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getResponse(_x, _x2, _x3) {
        return _getResponse.apply(this, arguments);
      }

      return getResponse;
    }()
  }]);
  return SmartActionHook;
}();

module.exports = SmartActionHook;